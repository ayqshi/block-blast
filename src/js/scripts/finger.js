function (require, module, exports) {
    "use strict";

    // Unregisters this module from the global Cocos Creator module registry.
    // The module ID "27f76E96mJB/4VGskwCUGdq" and the name "finger" are for internal tracking.
    cc._RF.push(module, "27f76E96mJB/4VGskwCUGdq", "finger");

    // Helper function for JavaScript class inheritance, often generated by TypeScript.
    // 'childClass' extends 'parentClass'.
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (child, parent) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(child, parent);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();

    // Helper function to apply decorators to classes and their members, common in TypeScript/Cocos Creator.
    // Used for @ccclass and @property.
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    // Mark this module as an ES module.
    Object.defineProperty(exports, "__esModule", { value: true });

    // Imports the control module (which is typically a singleton with global game logic).
    var controlModule = require("../control"); // Note: Path adjusted to "../control" as per the original file.

    // Shorthand for Cocos Creator's decorator system.
    var ccDecorators = cc._decorator;
    var ccclass = ccDecorators.ccclass; // Decorator to register a class as a Cocos Creator component.
    var property = ccDecorators.property; // Decorator to expose properties in the editor.

    /**
     * Cocos Creator component that controls a finger animation, typically used for game tutorials or guides.
     */
    var FingerComponent = (function (_super) {
        // Constructor, initializes component properties.
        function FingerComponent() {
            var _this = _super.apply(this, arguments) || this;
            _this.animationComponent = null; // Property to hold the cc.Animation component attached to this node.
            return _this;
        }

        // Apply inheritance: FingerComponent extends cc.Component.
        __extends(FingerComponent, _super);

        /**
         * Cocos Creator lifecycle method: Called once after all components are loaded and `onLoad` is called.
         * Sets the initial position of the finger node to the position of the game's options node.
         */
        FingerComponent.prototype.onStart = function () {
            this.node.position = controlModule.control.view.options_node.position;
        };

        /**
         * Animates the finger's movement from its current position to a target guide position.
         * The target position is fetched from the game's configuration based on the current level.
         */
        FingerComponent.prototype.onPressGuideFInger = function () {
            // Get the target position from the current level's guide configuration.
            var targetPosition = controlModule.control.settings.guide_conf[controlModule.control.level - 1].pos;

            // Create a Cocos Creator tween to animate the finger's movement.
            cc.tween(this.node)
                .to(1, { // Animate over 1 second.
                    position: cc.v2(targetPosition[0], targetPosition[1]) // Target position.
                }, {
                    easing: controlModule.control.ease("easeOutCubic") // Apply an ease-out cubic easing for smooth deceleration.
                })
                .start(); // Start the animation.
        };

        /**
         * Cocos Creator lifecycle method: Called when the component becomes disabled.
         * Resets the finger's state, stopping all actions and returning it to its initial position.
         */
        FingerComponent.prototype.onDisable = function () {
            cc.dLog("disable"); // Log a debug message.
            this.node.stopAllActions(); // Stop any ongoing animations on the finger node.
            this.node.position = controlModule.control.view.options_node.position; // Reset position.
            this.animationComponent.setCurrentTime(0); // Reset the animation component to the start.
        };

        // Apply @property decorators to expose properties in the editor.
        __decorate([property(cc.Animation)], FingerComponent.prototype, "animationComponent", void 0);
        // Apply @ccclass decorator to register this class as a Cocos Creator component.
        __decorate([ccclass], FingerComponent);

        return FingerComponent;
    })(cc.Component); // The FingerComponent class extends cc.Component.

    // Set the default export of this module to the FingerComponent class.
    exports.default = FingerComponent;

    // Pops the module off the internal Cocos Creator module stack, indicating it's done loading.
    cc._RF.pop();
}