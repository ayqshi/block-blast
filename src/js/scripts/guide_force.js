function (require, module, exports) {
    "use strict";

    // Unregisters this module from the global Cocos Creator module registry.
    // The module ID "4393dBlYotAIb/7GRXWqxbZ" and the name "guide_force" are for internal tracking.
    cc._RF.push(module, "4393dBlYotAIb/7GRXWqxbZ", "guide_force");

    // Helper function for JavaScript class inheritance, often generated by TypeScript.
    // 'childClass' extends 'parentClass'.
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (child, parent) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(child, parent);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();

    // Helper function to apply decorators to classes and their members, common in TypeScript/Cocos Creator.
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    // Mark this module as an ES module.
    Object.defineProperty(exports, "__esModule", { value: true });

    // Imports the control module (which is typically a singleton with global game logic).
    var controlModule = require("./control");

    // Shorthand for Cocos Creator's decorator system.
    var ccDecorators = cc._decorator;
    var ccclass = ccDecorators.ccclass; // Decorator to register a class as a Cocos Creator component.
    var property = ccDecorators.property; // Decorator to expose properties in the editor.

    /**
     * Cocos Creator component for a "forced guide" animation, likely part of a game tutorial.
     * It controls the movement of a finger and a "toy" node (likely the game object being interacted with).
     */
    var GuideForceComponent = (function (_super) {
        // Constructor, initializes component properties.
        function GuideForceComponent() {
            var _this = _super.apply(this, arguments) || this;
            _this.fingerNode = null; // Property to hold the finger node.
            _this.animationComponent = null; // Property to hold the animation component.
            return _this;
        }

        // Apply inheritance: GuideForceComponent extends cc.Component.
        __extends(GuideForceComponent, _super);

        /**
         * Cocos Creator lifecycle method: Called when the component is first loaded.
         * The function is empty, indicating no initialization is needed at this stage.
         */
        GuideForceComponent.prototype.onLoad = function () { };

        /**
         * Initializes the component with a set of parameters for the guided animation.
         * @param startPosition The initial position for the finger.
         * @param endPosition The final position for the finger's movement.
         * @param toyNode The main game object node that the guide is interacting with.
         * @param toyShadowNode The shadow node associated with the toy.
         * @param d3Rate A rate for a "3D" effect (e.g., depth or bounce).
         * @param easeName The name of the easing function to use for the tween animation.
         * @param moveTime The duration of the movement animation.
         */
        GuideForceComponent.prototype.init = function (startPosition, endPosition, toyNode, toyShadowNode, d3Rate, easeName, moveTime) {
            this.startPosition = startPosition;
            this.endPosition = endPosition;
            this.toyNode = toyNode;
            this.toyShadowNode = toyShadowNode;
            this.d3Rate = d3Rate;
            this.easeName = easeName;
            this.moveTime = moveTime;
        };

        /**
         * Cocos Creator lifecycle method: Called once after all components are loaded and `onLoad` is called.
         * If this is the first time it's started, it just sets the finger's position.
         * If it's a subsequent start, it tweens the finger back to the start position.
         */
        GuideForceComponent.prototype.onStart = function () {
            if (!this.started) {
                this.started = true;
                this.fingerNode.x = this.startPosition;
                return;
            }
            cc.tween(this.fingerNode)
                .to(10 / 60, { x: this.startPosition }) // Animates over 10 frames (10/60 sec).
                .start();
        };

        /**
         * Animates the finger's movement from the starting position to the ending position.
         */
        GuideForceComponent.prototype.onMove = function () {
            cc.tween(this.fingerNode)
                .to(this.moveTime, { x: this.endPosition }, {
                    easing: controlModule.control.ease(this.easeName) // Apply the specified easing function.
                })
                .start();
        };

        /**
         * Simulates a "release" action by animating the toy and its shadow node.
         * This likely creates a bounce or "press" effect on the toy.
         */
        GuideForceComponent.prototype.onRelease = function () {
            if (cc.isValid(this.toyNode)) {
                var initialY = this.toyNode.y;
                var bounceDistance = 20 * this.d3Rate; // Calculate bounce distance based on a rate.

                // Animate the main toy node down and back up.
                cc.tween(this.toyNode)
                    .to(0.2, { y: initialY - bounceDistance })
                    .to(0.1, { y: initialY })
                    .start();

                // If a shadow node exists, apply the same bounce animation to it.
                if (cc.isValid(this.toyShadowNode)) {
                    cc.tween(this.toyShadowNode)
                        .to(0.2, { y: initialY - bounceDistance })
                        .to(0.1, { y: initialY })
                        .start();
                }
            }
        };

        /**
         * Restarts the animation state of the finger and its animation component.
         */
        GuideForceComponent.prototype.restart = function () {
            this.fingerNode.stopAllActions(); // Stop any ongoing tweens on the finger.
            this.animationComponent.stop(); // Stop the animation component.
            this.animationComponent.setCurrentTime(0); // Reset animation to the beginning.
            this.animationComponent.play(null, 0); // Play the animation from the start.
        };

        // Apply @property decorators to expose properties in the editor.
        __decorate([property(cc.Node)], GuideForceComponent.prototype, "fingerNode", void 0);
        __decorate([property(cc.Animation)], GuideForceComponent.prototype, "animationComponent", void 0);
        // Apply @ccclass decorator to register this class as a Cocos Creator component.
        __decorate([ccclass], GuideForceComponent);

        return GuideForceComponent;
    })(cc.Component);

    // Set the default export of this module to the GuideForceComponent class.
    exports.default = GuideForceComponent;

    // Pops the module off the internal Cocos Creator module stack, indicating it's done loading.
    cc._RF.pop();
}