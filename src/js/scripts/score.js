function (require, module, exports) {
    "use strict";

    // Unregisters this module from the global Cocos Creator module registry.
    // The module ID "c6989cEKftKT6UYpz0h4Z30" and the name "score" are for internal tracking.
    cc._RF.push(module, "c6989cEKftKT6UYpz0h4Z30", "score");

    // Helper function for JavaScript class inheritance, often generated by TypeScript.
    // 'childClass' extends 'parentClass'.
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (child, parent) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(child, parent);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();

    // Helper function to apply decorators to classes and their members, common in TypeScript/Cocos Creator.
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    // Mark this module as an ES module.
    Object.defineProperty(exports, "__esModule", { value: true });

    // Imports the control module (which is typically a singleton with global game logic).
    var controlModule = require("../control");

    // Shorthand for Cocos Creator's decorator system.
    var ccDecorators = cc._decorator;
    var ccclass = ccDecorators.ccclass; // Decorator to register a class as a Cocos Creator component.
    var property = ccDecorators.property; // Decorator to expose properties in the editor.

    /**
     * Cocos Creator component responsible for displaying score, combo, and "grade" (e.g., "Good", "Great") messages
     * during gameplay, along with associated animations.
     */
    var ScoreDisplayComponent = (function (_super) {
        // Constructor initializes component properties.
        function ScoreDisplayComponent() {
            var _this = _super.apply(this, arguments) || this;
            _this.gradeLabel = null; // cc.Label component for displaying score grades (e.g., "Excellent").
            _this.scoreLabel = null; // cc.Label component for displaying the numerical score gained.
            _this.comboLabel = null; // cc.Label component for displaying the combo count.
            _this.comboNameNode = null; // Node for the combo name, its position changes based on combo count.
            _this.particleNode = null; // Node for a particle effect (e.g., score particles).
            _this.scoreAnimation = null; // cc.Animation component for playing score-related animations.
            return _this;
        }

        // Apply inheritance: ScoreDisplayComponent extends cc.Component.
        __extends(ScoreDisplayComponent, _super);

        /**
         * Cocos Creator lifecycle method: Called when the component is first loaded.
         * Currently, this method is empty, meaning no special initialization is performed at load time.
         */
        ScoreDisplayComponent.prototype.onLoad = function () {};

        /**
         * Displays the score earned from a player action, including combo and lines cleared.
         * It calculates the score and triggers the appropriate animations.
         * @param {object} scoreData An object containing score details.
         * @param {number} scoreData.combo The current combo multiplier.
         * @param {number} scoreData.bingo_lines The number of lines or blocks cleared in this action.
         */
        ScoreDisplayComponent.prototype.showScore = function (scoreData) {
            var _this = this; // Capture 'this' for use inside the scheduled callback.

            var comboCount = scoreData.combo;
            var linesCleared = scoreData.bingo_lines;
            var baseScore = controlModule.control.settings.score_base; // Base score value from settings.
            var scoreLabels = controlModule.control.settings.score_lbl; // Labels for grades (e.g., "Good", "Great").
            var bingoScores = controlModule.control.settings.score_bingo; // Score multipliers based on lines cleared.

            // Set the grade label based on the number of lines cleared.
            // If `linesCleared - 1` is out of bounds, it defaults to an empty string.
            this.gradeLabel.string = scoreLabels[linesCleared - 1] || "";

            // Adjust combo and particle node positions based on combo count.
            if (comboCount === 1) {
                this.comboLabel.node.active = false; // Hide combo label for single actions.
                this.comboNameNode.x = 0; // Center the combo name node.
                this.particleNode.x = 0; // Center the particle node.
            } else {
                this.comboLabel.string = comboCount; // Display the combo count.
                // Position the particle node relative to the combo label.
                this.particleNode.x = this.comboLabel.node.x + this.comboLabel.node.width / 2 + 7;
            }

            // Adjust score label vertical position if only one line was cleared.
            if (linesCleared === 1) {
                this.scoreLabel.node.y = 0;
            }

            // Calculate the total score for this action.
            // Formula: base_score * bingo_multiplier * (combo_count + 1)
            var earnedScore = baseScore * bingoScores[linesCleared - 1] * (comboCount + 1);
            this.scoreLabel.string = "+" + String(earnedScore); // Display the earned score.

            // Play the appropriate animation based on whether there's a combo.
            if (comboCount) {
                this.scoreLabel.node.color = cc.color(255, 246, 192); // Set score label color for combo.
                this.scoreAnimation.play("combo_score"); // Play combo score animation.
            } else {
                this.scoreAnimation.play("score"); // Play regular score animation.
            }

            // Schedule a callback to add the score to the total game score after 1 second.
            this.scheduleOnce(function () {
                controlModule.control.view.addScore(earnedScore);
            }, 1);
        };

        // Apply @property decorators to expose properties in the editor.
        __decorate([property(cc.Label)], ScoreDisplayComponent.prototype, "gradeLabel", void 0);
        __decorate([property(cc.Label)], ScoreDisplayComponent.prototype, "scoreLabel", void 0);
        __decorate([property(cc.Label)], ScoreDisplayComponent.prototype, "comboLabel", void 0);
        __decorate([property(cc.Node)], ScoreDisplayComponent.prototype, "comboNameNode", void 0);
        __decorate([property(cc.Node)], ScoreDisplayComponent.prototype, "particleNode", void 0);
        __decorate([property(cc.Animation)], ScoreDisplayComponent.prototype, "scoreAnimation", void 0);
        // Apply @ccclass decorator to register this class as a Cocos Creator component.
        __decorate([ccclass], ScoreDisplayComponent);

        return ScoreDisplayComponent;
    })(cc.Component); // The ScoreDisplayComponent class extends cc.Component.

    // Set the default export of this module to the ScoreDisplayComponent class.
    exports.default = ScoreDisplayComponent;

    // Pops the module off the internal Cocos Creator module stack, indicating it's done loading.
    cc._RF.pop();
}