function (require, module, exports) {
    "use strict";

    // Unregisters this module from the global Cocos Creator module registry.
    // The module ID "150e1cRDhZF44HLt34jJRvX" and the name "audio_btn" are used for internal tracking.
    cc._RF.push(module, "150e1cRDhZF44HLt34jJRvX", "audio_btn");

    // Helper function for JavaScript class inheritance, often generated by TypeScript.
    // 'childClass' extends 'parentClass'.
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (child, parent) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(child, parent);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();

    // Helper function to apply decorators to classes and their members, common in TypeScript/Cocos Creator.
    // Used for @ccclass and @property.
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    // Mark this module as an ES module to enable 'import' functionality.
    Object.defineProperty(exports, "__esModule", { value: true });

    // Import the 'control' module.
    // The './control' path will be resolved by the Cocos Creator module loader.
    var controlModule = require("./control");

    // Shorthand for Cocos Creator's decorator system.
    var ccDecorators = cc._decorator;
    var ccclass = ccDecorators.ccclass; // Decorator to register a class as a Cocos Creator component.
    var property = ccDecorators.property; // Decorator to expose properties in the editor.

    // Define the AudioButton class, which extends cc.Component.
    // cc.Component is the base class for all script components in Cocos Creator.
    var AudioButton = (function (_super) {
        // Constructor for the AudioButton component.
        function AudioButton() {
            // Call the parent class (cc.Component) constructor.
            var _this = _super.apply(this, arguments) || this;
            // Initialize properties that will be exposed in the editor via @property decorators.
            _this.audio_node = null; // Node that represents the active audio state (e.g., speaker icon).
            _this.mute_node = null;  // Node that represents the muted audio state (e.g., muted speaker icon).
            return _this;
        }

        // Apply inheritance: AudioButton extends cc.Component.
        __extends(AudioButton, _super);

        // Cocos Creator lifecycle method: called when the component is initialized.
        AudioButton.prototype.start = function () {
            // This method is currently empty but can be used for initialization logic.
        };

        // Custom method called when the audio button is clicked (e.g., via a UI event listener).
        AudioButton.prototype.onClickAudioBtn = function () {
            // Toggle the 'mute' state managed by the global control module.
            controlModule.control.mute = !controlModule.control.mute;

            // Update the visibility of the audio and mute nodes based on the new mute state.
            // If not muted, show audio_node; otherwise, show mute_node.
            this.audio_node.active = !controlModule.control.mute;
            this.mute_node.active = controlModule.control.mute;
        };

        // Apply @property decorators to expose 'audio_node' and 'mute_node' to the Cocos Creator editor.
        // These allow you to drag and drop nodes from the scene to these properties.
        __decorate([property(cc.Node)], AudioButton.prototype, "audio_node", void 0);
        __decorate([property(cc.Node)], AudioButton.prototype, "mute_node", void 0);

        // Apply the @ccclass decorator to register this class as a component in Cocos Creator.
        __decorate([ccclass], AudioButton);

        return AudioButton;
    })(cc.Component); // The AudioButton class extends cc.Component.

    // Set the default export of this module to the AudioButton class.
    exports.default = AudioButton;

    // Pops the module off the internal Cocos Creator module stack, indicating it's done loading.
    cc._RF.pop();
}