function (require, module, exports) {
    "use strict";

    // Unregisters this module from the global Cocos Creator module registry.
    // The module ID "dbb0bgwjWFLm64CyAk2NsE4" and the name "nexts" are for internal tracking.
    cc._RF.push(module, "dbb0bgwjWFLm64CyAk2NsE4", "nexts");

    // Helper function for JavaScript class inheritance, often generated by TypeScript.
    // 'childClass' extends 'parentClass'.
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (child, parent) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(child, parent);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();

    // Helper function to apply decorators to classes and their members, common in TypeScript/Cocos Creator.
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    // Mark this module as an ES module.
    Object.defineProperty(exports, "__esModule", { value: true });

    // Imports the control module, which is a singleton with global game logic.
    var controlModule = require("./control");
    // Shorthand for Cocos Creator's decorator system.
    var ccDecorators = cc._decorator;
    var ccclass = ccDecorators.ccclass; // Decorator to register a class as a Cocos Creator component.
    var property = ccDecorators.property; // Decorator to expose properties in the editor.

    /**
     * Cocos Creator component that manages all the "Next" toy displays.
     * It acts as a container and controller for multiple instances of the `NextToyComponent` (from `next.js`).
     */
    var NextsComponent = (function (_super) {
        // Constructor initializes component properties.
        function NextsComponent() {
            var _this = _super.apply(this, arguments) || this;
            _this.bigBackgroundNode = null; // Node for the background of the "Nexts" display.
            _this.nextToysNode = null; // Parent node for all the individual next toy components.
            _this.toyPrefab = null; // The prefab used to instantiate each next toy component.
            _this.toyList = []; // An array to store the instantiated `NextToyComponent` instances.
            return _this;
        }

        // Apply inheritance: NextsComponent extends cc.Component.
        __extends(NextsComponent, _super);

        /**
         * Initializes the component by instantiating the required number of "next" toy displays.
         * It reads the number of next toys from the game settings (`control.settings.next_count`).
         * @param {boolean} isInitial A flag to indicate if this is the initial initialization.
         */
        NextsComponent.prototype.init = function (isInitial) {
            var _this = this;
            var nextToyCount = controlModule.control.settings.next_count;
            var toyList = this.toyList;

            // Loop to instantiate and position each next toy component.
            for (var i = 0; i < nextToyCount; i++) {
                var newToyNode = cc.instantiate(this.toyPrefab);
                newToyNode.parent = this.nextToysNode;
                newToyNode.x = controlModule.control.settings.next_space * (i - nextToyCount / 2 + 0.5) * controlModule.control.d3rate;
                var nextToyComponent = newToyNode.getComponent("next");
                toyList.push(nextToyComponent);
                // Initialize each component with its index and a reference to this parent component.
                nextToyComponent.init({
                    idx: i,
                    parent_comp: this
                });
            }

            // Updates the next toys, with a delay if the game is being recorded.
            if (controlModule.control.view.isRecording()) {
                this.scheduleOnce(function () {
                    _this.updateNexts(isInitial);
                }, 0.5);
            } else {
                this.updateNexts(isInitial);
            }
        };

        /**
         * Updates all the "next" toy displays with the appropriate toy configurations.
         * It determines which set of toys to display based on the current toy index.
         * @param {boolean} isInitial A flag indicating if this is the initial update.
         */
        NextsComponent.prototype.updateNexts = function (isInitial) {
            var nextToyCount = controlModule.control.settings.next_count;
            // Calculate the base index for the next group of toys.
            var baseIndex = Math.floor((controlModule.control.view.toy_index + 1) / nextToyCount) * nextToyCount;

            // Special case for a single next toy.
            if (nextToyCount === 1) {
                if (!this.inited) {
                    baseIndex = 0;
                    this.inited = true;
                }
            }

            // Iterate through each next toy component and update it.
            for (var i = 0; i < nextToyCount; i++) {
                this.toyList[i].updateNext(i, baseIndex, isInitial);
            }
        };

        /**
         * Triggers the "pop" animation for the currently selected "next" toy.
         * It also calls `updateNexts` if all toys in the current group have been used.
         */
        NextsComponent.prototype.popNext = function () {
            var _this = this;
            var nextToyCount = controlModule.control.settings.next_count;
            var nextToyIndex = controlModule.control.view.toy_index % nextToyCount;
            var isLastToyInGroup = nextToyCount === nextToyIndex + 1;
            var currentToyComponent = this.toyList[nextToyIndex];

            if (cc.isValid(currentToyComponent)) {
                // Play the "pop" animation and update the list if it was the last toy.
                currentToyComponent.popNext(function () {
                    if (isLastToyInGroup) {
                        _this.updateNexts(true);
                    }
                });
            }
        };

        /**
         * Applies a color change to all next toys.
         * @param {function} colorFunction A function that takes a node and applies a color change.
         */
        NextsComponent.prototype.changeToyColor = function (colorFunction) {
            this.toyList.map(function (toy) {
                toy.changeToyColor(colorFunction);
            });
        };

        /**
         * Returns the configuration of the next available toy.
         * It finds the first toy in the list that has not yet "popped".
         * @returns The configuration object of the next toy.
         */
        NextsComponent.prototype.getNextToyConf = function () {
            for (var i = 0; i < this.toyList.length; i++) {
                var toyComponent = this.toyList[i];
                if (cc.isValid(toyComponent) && !toyComponent.poped) {
                    return toyComponent.toy_conf;
                }
            }
        };

        /**
         * Simulates a touch event on a specific next toy component.
         * This is likely used for guided tutorials.
         * @param {number} index The 1-based index of the toy to "click".
         */
        NextsComponent.prototype.clickChangeNext = function (index) {
            this.toyList[index - 1].autoTouchSel();
        };

        /**
         * Enters a guided tutorial mode, activating the guide animation on a specific toy.
         * @param {number} index The 1-based index of the toy to guide the user to.
         */
        NextsComponent.prototype.enterGuide = function (index) {
            this.in_guide = true;
            this.guide_idx = index - 1;
            this.toyList[this.guide_idx].showGuide();
        };

        /**
         * Plays the guide animation for a specific toy and hides it for all others.
         * @param {number} index The 0-based index of the toy to show the guide on.
         */
        NextsComponent.prototype.playGuide = function (index) {
            for (var i = 0; i < this.toyList.length; i++) {
                var toyComponent = this.toyList[i];
                if (cc.isValid(toyComponent)) {
                    if (i === index) {
                        toyComponent.node.zIndex = 10;
                        toyComponent.guideAnimation.play();
                    } else {
                        toyComponent.node.zIndex = 1;
                    }
                }
            }
        };

        /**
         * Flashes the selection animation on the currently guided toy.
         */
        NextsComponent.prototype.flashGuide = function () {
            if (this.guide_idx) {
                this.toyList[this.guide_idx].nextSelectionAnimation.play();
            }
        };

        // Apply @property decorators to expose properties in the editor.
        __decorate([property(cc.Node)], NextsComponent.prototype, "bigBackgroundNode", void 0);
        __decorate([property(cc.Node)], NextsComponent.prototype, "nextToysNode", void 0);
        __decorate([property(cc.Prefab)], NextsComponent.prototype, "toyPrefab", void 0);
        // Apply @ccclass decorator to register this class as a Cocos Creator component.
        __decorate([ccclass], NextsComponent);

        return NextsComponent;
    })(cc.Component);

    // Set the default export of this module to the NextsComponent class.
    exports.default = NextsComponent;

    // Pops the module off the internal Cocos Creator module stack, indicating it's done loading.
    cc._RF.pop();
}