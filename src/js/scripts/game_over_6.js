function (require, module, exports) {
    "use strict";

    // Unregisters this module from the global Cocos Creator module registry.
    // The module ID "83d4a2K2rxOArfgtBX3vJ8J" and the name "game_over_6" are for internal tracking.
    cc._RF.push(module, "83d4a2K2rxOArfgtBX3vJ8J", "game_over_6");

    // Helper function for JavaScript class inheritance, often generated by TypeScript.
    // 'childClass' extends 'parentClass'.
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (child, parent) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(child, parent);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();

    // Helper function to apply decorators to classes and their members, common in TypeScript/Cocos Creator.
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    // Mark this module as an ES module.
    Object.defineProperty(exports, "__esModule", { value: true });

    // Imports the control module (which is typically a singleton with global game logic).
    var controlModule = require("./control");

    // Shorthand for Cocos Creator's decorator system.
    var ccDecorators = cc._decorator;
    var ccclass = ccDecorators.ccclass; // Decorator to register a class as a Cocos Creator component.

    /**
     * Cocos Creator component for the game over screen.
     * It handles the animations for the game's logo and a looping particle/background effect.
     */
    var GameOverComponent = (function (_super) {
        // Constructor, initializes the component.
        function GameOverComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }

        // Apply inheritance: GameOverComponent extends cc.Component.
        __extends(GameOverComponent, _super);

        /**
         * Cocos Creator lifecycle method: Called when the component is first loaded.
         * It initializes instance variables and finds the nodes it needs to control.
         */
        GameOverComponent.prototype.onLoad = function () {
            this.control = controlModule.control; // Store a reference to the global control singleton.
            this.list_PA = []; // An array to hold the "PA" (probably Particle Animation or something similar) nodes.
            this.logoNode = this.node.getChildByName("logo"); // Get the logo node.

            // Get the two children of the "mask" node and add their children to the list_PA array.
            var maskNode = this.node.getChildByName("mask");
            this.list_PA = this.list_PA.concat(maskNode.getChildByName("node1").children);
            this.list_PA = this.list_PA.concat(maskNode.getChildByName("node2").children);

            // Set the initial HSL (Hue, Saturation, Lightness) values for the logo.
            // This is likely setting the initial colors or a filter effect for the logo.
            this.control.setHSL(this.logoNode, [0, 0, 1, 0, 0, 1, 1]);
        };

        /**
         * Sets a value to trigger the logo animation.
         * The `update` function will then animate the logo's HSL value.
         */
        GameOverComponent.prototype.playLogo = function () {
            this.logo_v = 1; // Start the logo animation by setting its "value" to 1.
        };

        /**
         * Sets a flag to start the particle/background animation in the `update` loop.
         */
        GameOverComponent.prototype.playPA = function () {
            this.play_PA = true; // Set the flag to enable the PA animation.
        };

        /**
         * Cocos Creator lifecycle method: Called every frame.
         * This is where the core animation logic for the game over screen resides.
         */
        GameOverComponent.prototype.update = function (deltaTime) {
            // Logic for the looping particle/background animation.
            if (this.play_PA) {
                // Iterate through all the "PA" nodes.
                for (var i = 0; i < this.list_PA.length; i++) {
                    var paNode = this.list_PA[i];
                    // Check if the node is still valid before moving it.
                    if (cc.isValid(paNode)) {
                        paNode.x += 1; // Move the node one unit to the right.
                        // If the node moves off-screen, loop it back to the beginning.
                        if (paNode.x > 1332) {
                            paNode.x -= 2664; // Reset its position to the far left.
                        }
                    }
                }
            }
            // Logic for the logo animation.
            if (this.logo_v > 0) {
                this.logo_v -= 2 * deltaTime; // Gradually decrease the logo's value.
                if (this.logo_v < 0) {
                    this.logo_v = 0; // Clamp the value to a minimum of 0.
                }
                // Update the logo's HSL filter based on the current value.
                this.control.setHSL(this.logoNode, [0, 0, this.logo_v, 0, 0, 1, 1]);
            }
        };

        // Apply @ccclass decorator to register this class as a Cocos Creator component.
        __decorate([ccclass], GameOverComponent);

        return GameOverComponent;
    })(cc.Component);

    // Set the default export of this module to the GameOverComponent class.
    exports.default = GameOverComponent;

    // Pops the module off the internal Cocos Creator module stack, indicating it's done loading.
    cc._RF.pop();
}