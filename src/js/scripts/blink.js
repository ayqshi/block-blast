function (require, module, exports) {
    "use strict";

    // Unregisters this module from the global Cocos Creator module registry.
    // The module ID "d1c383iyftABLzwyYNVHEgJ" and the name "blink" are for internal tracking.
    cc._RF.push(module, "d1c383iyftABLzwyYNVHEgJ", "blink");

    // Helper function for JavaScript class inheritance, often generated by TypeScript.
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (child, parent) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(child, parent);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();

    // Helper function to apply decorators to classes and their members, common in TypeScript/Cocos Creator.
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    // Mark this module as an ES module.
    Object.defineProperty(exports, "__esModule", { value: true });

    // Imports the control module.
    var controlModule = require("./control");
    var ccDecorators = cc._decorator;
    var ccclass = ccDecorators.ccclass; // Decorator to register a class as a Cocos Creator component.
    var property = ccDecorators.property; // Decorator to expose properties in the editor.

    // A Cocos Creator component that makes a node blink and plays a sound.
    var BlinkComponent = (function (_super) {
        // Constructor, initializes the properties.
        function BlinkComponent() {
            var _this = _super.apply(this, arguments) || this;
            _this.spriteNode = null; // A Cocos Creator Node that will be made to blink.
            _this.blink_audio = null; // An AudioClip to play when the sprite becomes active.
            return _this;
        }

        // Apply inheritance: BlinkComponent extends cc.Component.
        __extends(BlinkComponent, _super);

        // This method is called when the component is enabled.
        BlinkComponent.prototype.onEnable = function () {
            this.control = controlModule.control;
            this.changeActive();
            // Play audio once when enabled if the sprite is active.
            if (this.spriteNode.active && this.blink_audio) {
                this.control.playAudio(this.blink_audio, false);
            }
        };

        // Schedules a repeated action to toggle the sprite's active state.
        BlinkComponent.prototype.changeActive = function () {
            var _this = this;
            // Check if the node is valid before scheduling the action.
            if (cc.isValid(this.node)) {
                // Schedule a function to run every 0.5 seconds.
                this.schedule(function () {
                    // Check again if the sprite node is valid.
                    if (cc.isValid(_this.spriteNode)) {
                        // Toggle the active state of the sprite node.
                        _this.spriteNode.active = !_this.spriteNode.active;
                        // If the sprite is now active and an audio clip is assigned, play it.
                        if (_this.spriteNode.active && _this.blink_audio) {
                            _this.control.playAudio(_this.blink_audio, false);
                        }
                    }
                }, 0.5);
            }
        };

        // Apply @property decorators to expose the properties in the editor.
        __decorate([property(cc.Node)], BlinkComponent.prototype, "spriteNode", void 0);
        __decorate([property(cc.AudioClip)], BlinkComponent.prototype, "blink_audio", void 0);
        __decorate([ccclass], BlinkComponent);

        return BlinkComponent;
    })(cc.Component);

    // Set the default export of this module to the BlinkComponent class.
    exports.default = BlinkComponent;

    // Pops the module off the internal Cocos Creator module stack.
    cc._RF.pop();
}