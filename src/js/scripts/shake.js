function (require, module, exports) {
    "use strict";

    // Unregisters this module from the global Cocos Creator module registry.
    // The module ID "acbbcXFsbVJpYFgOe/Y9JAw" and the name "shake" are for internal tracking.
    cc._RF.push(module, "acbbcXFsbVJpYFgOe/Y9JAw", "shake");

    // Helper function for JavaScript class inheritance, often generated by TypeScript.
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (child, parent) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(child, parent);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();

    // Mark this module as an ES module.
    Object.defineProperty(exports, "__esModule", { value: true });

    // Declares a `shake` function on the `exports` object.
    exports.shake = void 0;

    /**
     * Custom Cocos Creator Action that performs a shaking effect on a node.
     * This class extends `cc.ActionInterval`, which means it's an action that runs for a specified duration.
     */
    var ShakeAction = (function (_super) {
        // Constructor for the ShakeAction class.
        // @param duration The duration of the shake effect in seconds.
        // @param strengthX The maximum shake strength along the X-axis.
        // @param strengthY The maximum shake strength along the Y-axis.
        function ShakeAction(duration, strengthX, strengthY) {
            var _this = _super.call(this) || this;
            _this._initial_x = 0; // Stores the original X position of the target node.
            _this._initial_y = 0; // Stores the original Y position of the target node.
            _this._strength_x = 0; // The strength of the shake along the X-axis.
            _this._strength_y = 0; // The strength of the shake along the Y-axis.
            _this.initWithDuration(duration, strengthX, strengthY);
            return _this;
        }

        // Apply inheritance: ShakeAction extends cc.ActionInterval.
        __extends(ShakeAction, _super);

        /**
         * Initializes the action with a duration and shake strengths.
         * This is a standard method for initializing `cc.Action` objects.
         */
        ShakeAction.prototype.initWithDuration = function (duration, strengthX, strengthY) {
            _super.prototype.initWithDuration.call(this, duration);
            this._strength_x = strengthX;
            this._strength_y = strengthY;
            return true;
        };

        /**
         * The core update method, called every frame during the action.
         * It calculates a new random position for the node within the shake strength.
         */
        ShakeAction.prototype.update = function () {
            // Generate a random offset for the X position, ranging from -strength_x to +strength_x.
            var newX = 2 * Math.random() * this._strength_x - this._strength_x;
            // Generate a random offset for the Y position, ranging from -strength_y to +strength_y.
            var newY = 2 * Math.random() * this._strength_y - this._strength_y;

            // Set the target node's position to its original position plus the random offsets.
            this.getTarget().setPosition(newX + this._initial_x, newY + this._initial_y);
        };

        /**
         * Called when the action starts on a target node.
         * It stores the initial position of the node before the shake begins.
         */
        ShakeAction.prototype.startWithTarget = function (target) {
            _super.prototype.startWithTarget.call(this, target);
            this._initial_x = target.x;
            this._initial_y = target.y;
        };

        /**
         * Called when the action is stopped or finishes.
         * It resets the target node's position back to its original position.
         */
        ShakeAction.prototype.stop = function () {
            this.getTarget().setPosition(new cc.Vec2(this._initial_x, this._initial_y));
            _super.prototype.stop.call(this);
        };

        return ShakeAction;
    })(cc.ActionInterval); // The ShakeAction class extends cc.ActionInterval.

    /**
     * A factory function to create and return a new `ShakeAction` instance.
     * This is the public API for this module.
     * @param duration The duration of the shake effect in seconds.
     * @param strengthX The maximum shake strength along the X-axis.
     * @param strengthY The maximum shake strength along the Y-axis.
     */
    exports.shake = function (duration, strengthX, strengthY) {
        return new ShakeAction(duration, strengthX, strengthY);
    };

    // Pops the module off the internal Cocos Creator module stack, indicating it's done loading.
    cc._RF.pop();
}