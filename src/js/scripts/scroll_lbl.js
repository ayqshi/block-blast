function (require, module, exports) {
    "use strict";

    // Unregisters this module from the global Cocos Creator module registry.
    // The module ID "339f5Z8T69Cyr6dlZaNKWwb" and the name "scroll_lbl" are for internal tracking.
    cc._RF.push(module, "339f5Z8T69Cyr6dlZaNKWwb", "scroll_lbl");

    // Helper function for JavaScript class inheritance, often generated by TypeScript.
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (child, parent) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(child, parent);
        };
        return function (d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();

    // Helper function to apply decorators to classes and their members, common in TypeScript/Cocos Creator.
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    // Mark this module as an ES module.
    Object.defineProperty(exports, "__esModule", { value: true });

    // Imports the control module (which is typically a singleton with global game logic).
    var controlModule = require("./control");

    // Shorthand for Cocos Creator's decorator system.
    var ccDecorators = cc._decorator;
    var ccclass = ccDecorators.ccclass; // Decorator to register a class as a Cocos Creator component.
    var property = ccDecorators.property; // Decorator to expose properties in the editor.

    /**
     * Cocos Creator component for a "scrolling" or counting label effect.
     * This component allows a numerical label to animate from a starting value to an ending value.
     */
    var ScrollLabelComponent = (function (_super) {
        // Constructor initializes component properties.
        function ScrollLabelComponent() {
            var _this = _super.apply(this, arguments) || this;
            _this.label = null; // cc.Label component to display the numbers.
            _this.startValue = 0; // The starting value for the count.
            _this.endValue = 100; // The ending value for the count.
            _this.prefix = ""; // Text to prepend to the number (e.g., "$").
            _this.suffix = ""; // Text to append to the number (e.g., "%").
            _this.playOnLoad = false; // Whether to automatically start the animation when the component loads.
            return _this;
        }

        // Apply inheritance: ScrollLabelComponent extends cc.Component.
        __extends(ScrollLabelComponent, _super);

        /**
         * Cocos Creator lifecycle method: Called when the component is first loaded.
         * It initializes the label's string and starts the animation if `playOnLoad` is true.
         */
        ScrollLabelComponent.prototype.onLoad = function () {
            this.control = controlModule.control;
            // Set the initial label string to the start value with prefix and suffix.
            this.label.string = this.prefix + this.startValue + this.suffix;

            // Automatically play the animation if configured to do so.
            if (this.playOnLoad) {
                this.playLabel();
            }
        };

        /**
         * Triggers the "scrolling" animation.
         * It uses a method from the global `control` singleton to perform the animation.
         */
        ScrollLabelComponent.prototype.playLabel = function () {
            // Call the `scrolNum` method from the control module.
            // Arguments are:
            // 1. The label component to animate.
            // 2. The starting number.
            // 3. The ending number.
            // 4. Duration (1 second in this case).
            // 5. A callback function (null here).
            // 6. A format string for the label, using a placeholder '{0}' for the number.
            this.control.scrolNum(this.label, this.startValue, this.endValue, 1, null, this.prefix + "{0}" + this.suffix);
        };

        // Apply @property decorators to expose properties in the editor.
        __decorate([property(cc.Label)], ScrollLabelComponent.prototype, "label", void 0);
        __decorate([property(cc.Float)], ScrollLabelComponent.prototype, "startValue", void 0);
        __decorate([property(cc.Float)], ScrollLabelComponent.prototype, "endValue", void 0);
        __decorate([property(cc.String)], ScrollLabelComponent.prototype, "prefix", void 0);
        __decorate([property(cc.String)], ScrollLabelComponent.prototype, "suffix", void 0);
        __decorate([property(cc.Boolean)], ScrollLabelComponent.prototype, "playOnLoad", void 0);
        // Apply @ccclass decorator to register this class as a Cocos Creator component.
        __decorate([ccclass], ScrollLabelComponent);

        return ScrollLabelComponent;
    })(cc.Component); // The ScrollLabelComponent class extends cc.Component.

    // Set the default export of this module to the ScrollLabelComponent class.
    exports.default = ScrollLabelComponent;

    // Pops the module off the internal Cocos Creator module stack, indicating it's done loading.
    cc._RF.pop();
}